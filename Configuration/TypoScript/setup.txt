plugin.tx_properties {
	view {
		templateRootPaths.0 = {$plugin.tx_properties.view.templateRootPath}
		partialRootPaths.0 = {$plugin.tx_properties.view.partialRootPath}
		layoutRootPaths.0 = {$plugin.tx_properties.view.layoutRootPath}
	}
	persistence {
		storagePid = {$plugin.tx_properties.persistence.storagePid}
	}
	settings {
		object {
		    listPid = {$plugin.tx_properties.settings.object.listPid}
		    singlePid = {$plugin.tx_properties.settings.object.singlePid}
		    defaultImage = {$plugin.tx_properties.settings.object.defaultImage}
		    cover {
		        listWidth = {$plugin.tx_properties.settings.object.cover.listWidth}
		        listHeight = {$plugin.tx_properties.settings.object.cover.listHeight}
		    }
		    backgroundImage {
		        useObjectCoverIfNoBackgroundImageIsSet = {$plugin.tx_properties.settings.object.backgroundImage.useObjectCoverIfNoBackgroundImageIsSet}
                width = {$plugin.tx_properties.settings.object.backgroundImage.width}
                height = {$plugin.tx_properties.settings.object.backgroundImage.height}
                minWidth = {$plugin.tx_properties.settings.object.backgroundImage.minWidth}
                minHeight = {$plugin.tx_properties.settings.object.backgroundImage.minHeight}
                maxWidth = {$plugin.tx_properties.settings.object.backgroundImage.maxWidth}
                maxHeight = {$plugin.tx_properties.settings.object.backgroundImage.maxHeight}
		    }
		    orderings {
		        defaultOrder = {$plugin.tx_properties.settings.object.orderings.defaultOrder}
		        defaultOrderField = {$plugin.tx_properties.settings.object.orderings.defaultOrderField}
		        allowedOrderFields = {$plugin.tx_properties.settings.object.orderings.allowedOrderFields}
		    }
		}
		categories {
            autoActivateFirstCategory = {$plugin.tx_properties.settings.categories.autoActivateFirstCategory}
		}
		linkArguments {
		    ignore = {$plugin.tx_properties.settings.linkArguments.ignore}
		    register = {$plugin.tx_properties.settings.linkArguments.register}
		    remove = {$plugin.tx_properties.settings.linkArguments.remove}
		    processing {
		        implodes = {$plugin.tx_properties.settings.linkArguments.processing.implodes}
		    }
		}
		ajax {
		    retrieveContentPageType = {$plugin.tx_properties.settings.ajax.retrieveContentPageType}
		    performFiltersPostFormPageType = {$plugin.tx_properties.settings.ajax.performFiltersPostFormPageType}
		}
		filters {
            eliminated = {$plugin.tx_properties.settings.filters.eliminated}
            hideDisabledOptions = {$plugin.tx_properties.settings.filters.hideDisabledOptions}
            autoDeactivate = {$plugin.tx_properties.settings.filters.autoDeactivate}
            types {
                options {
                    remove = {$plugin.tx_properties.settings.filters.types.options.remove}
                }
            }
		    search {
		        fields = {$plugin.tx_properties.settings.filters.search.fields}
		        spaceCharacter = {$plugin.tx_properties.settings.filters.search.spaceCharacter}
		    }
		    presences {
		        autoDeactivateWhenTypeIsSelectedForLotsOnly = {$plugin.tx_properties.settings.filters.presences.autoDeactivateWhenTypeIsSelectedForLotsOnly}
		    }
            price {
                slider {
                    enable = {$plugin.tx_properties.settings.filters.price.slider.enable}
                }
                options = {$plugin.tx_properties.settings.filters.price.options}
                thousandsSeparator = {$plugin.tx_properties.settings.filters.price.thousandsSeparator}
                prependLabel = {$plugin.tx_properties.settings.filters.price.prependLabel}
                appendLabel = {$plugin.tx_properties.settings.filters.price.appendLabel}
            }
            lotSize {
                slider {
                    enable = {$plugin.tx_properties.settings.filters.lotSize.slider.enable}
                }
                options = {$plugin.tx_properties.settings.filters.lotSize.options}
                thousandsSeparator = {$plugin.tx_properties.settings.filters.lotSize.thousandsSeparator}
                prependLabel = {$plugin.tx_properties.settings.filters.lotSize.prependLabel}
                appendLabel = {$plugin.tx_properties.settings.filters.lotSize.appendLabel}
            }
            status {
                options {
                    remove = {$plugin.tx_properties.settings.filters.status.options.remove}
                }
            }
		}
	}
}

# Actions that can be called by TypoScript
lib.properties.listAction = USER
lib.properties.listAction {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	pluginName = Pi1
	extensionName = Properties
	vendorName = Ucreation
	controller = Object
	switchableControllerActions {
		Object {
			1 = list
		}
	}
	view =< plugin.tx_properties.view
	persistence =< plugin.tx_properties.persistence
	settings =< plugin.tx_properties.settings
}

lib.properties.showAction = USER
lib.properties.showAction {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	pluginName = Pi1
	extensionName = Properties
	vendorName = Ucreation
	controller = Object
	switchableControllerActions {
		Object {
			1 = show
		}
	}
	view =< plugin.tx_properties.view
	persistence =< plugin.tx_properties.persistence
	settings =< plugin.tx_properties.settings
}

lib.properties.listCategoriesAction = USER
lib.properties.listCategoriesAction {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	pluginName = Pi1
	extensionName = Properties
	vendorName = Ucreation
	controller = Category
	switchableControllerActions {
		Category {
			1 = listCategories
		}
	}
	view =< plugin.tx_properties.view
	persistence =< plugin.tx_properties.persistence
	settings =< plugin.tx_properties.settings
}

lib.properties.filtersAction = USER
lib.properties.filtersAction {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	pluginName = Pi1
	extensionName = Properties
	vendorName = Ucreation
	controller = Object
	switchableControllerActions {
		Object {
			1 = filters
		}
	}
	view =< plugin.tx_properties.view
	persistence =< plugin.tx_properties.persistence
	settings =< plugin.tx_properties.settings
}

lib.properties.subFiltersAction = USER
lib.properties.subFiltersAction {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	pluginName = Pi1
	extensionName = Properties
	vendorName = Ucreation
	controller = Object
	switchableControllerActions {
		Object {
			1 = subFilters
		}
	}
	view =< plugin.tx_properties.view
	persistence =< plugin.tx_properties.persistence
	settings =< plugin.tx_properties.settings
}

# Custom pages types (ajax)
ajaxRetrieveContent = PAGE
ajaxRetrieveContent {
    typeNum = {$plugin.tx_properties.settings.ajax.retrieveContentPageType}
	10 = USER_INT
    10 {
	    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	    pluginName = Pi1
	    extensionName = Properties
	    vendorName = Ucreation
	    controller = Object
	    switchableControllerActions {
		    Object {
			    1 = list
		    }
	    }
	    view =< plugin.tx_properties.view
	    persistence =< plugin.tx_properties.persistence
	    settings =< plugin.tx_properties.settings
    }
    config {
	    disableAllHeaderCode = 1
	    additionalHeaders = Content-type: text/plain
	    xhtml_cleaning = 0
	    admPanel = 0
	    debug = 0
    }
}

performFiltersPostForm = PAGE
performFiltersPostForm {
    typeNum = {$plugin.tx_properties.settings.ajax.performFiltersPostFormPageType}
	10 = USER_INT
    10 {
	    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	    pluginName = Pi1
	    extensionName = Properties
	    vendorName = Ucreation
	    controller = Object
	    switchableControllerActions {
		    Object {
			    1 = list
		    }
	    }
	    view =< plugin.tx_properties.view
	    persistence =< plugin.tx_properties.persistence
	    settings =< plugin.tx_properties.settings
    }
    config {
	    disableAllHeaderCode = 1
	    additionalHeaders = Content-type: application/json
	    xhtml_cleaning = 0
	    admPanel = 0
	    debug = 0
    }
}

# module.tx_properties <.plugin.tx_properties